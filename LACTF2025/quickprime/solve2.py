from sage.all import *
from tqdm import *
from Crypto.Util.number import *

a = 3639102303109162395864178422077577779221064154536403771389763395111534683724562777118136550969051185311051632530090039247200114242366732751911684067920501
c = 4012242486672515067112166478176303171390609296119907176575934204182448949151270727450126048358979051319213029891989501120609756556243950311923205057389879
m = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096
n = 72822235885237683093993723156176297866252290413120995604668448204825279353326093335763279007932338731691088770244412907961728771359268845051035268737506918755728978676477275652097155989705143487429381002387873117014647802285699616909956534862157278208527649275828940175351558390873985027330193830826343327499
ct = 69845518806661357231945567018331253612882480583911237940280631184314338765952423821557104994797033638499321838828659707779822326277917243714604216562447434200980196397584846990939309979378204063722708179686360963446986196530143385123598769610914361004192569033689722784944454444984955889103218637686900247973
e = 65537

def find_flag(p, q):
    if not is_prime(p) or not is_prime(q) or p * q != n:
        return None

    t = (p - 1) * (q - 1)
    d = pow(e, -1, t)
    return long_to_bytes(pow(ct, d, n))

F = Zp(2, 512)
PR = PolynomialRing(F, 'x')
x = PR.gen()

for i in tqdm(range(1, (1 << 16))):
    A = pow(a, i, m)

    B = 0
    for j in range(i):
        B += pow(a, j, m)
    B = c * B % m

    C = -n % m

    f = A * x ** 2 + B * x + C
    roots = f.roots(multiplicities=False)

    for p in roots:
        q = (A * p + B) % m
        flag = find_flag(Integer(p), Integer(q))
        if flag != None:
            print(flag)
            exit(0)


# lactf{w41t_th1s_1snt_s3cur3_4t_4ll_???}