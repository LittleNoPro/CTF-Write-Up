from Crypto.Util.number import *
from sage.all import *
from Crypto.Cipher import AES
import hashlib
from Crypto.Util.Padding import pad


p = 85013941328859365232686230728938372320812319905627686919070637645614632817039920673725615375841158719310596592903101914818137738460649589340349796188816568005092757847
g = 20033344683527080232439150682925185454003164954955126339094967675384779782733210350757021743656898625398860187361281262413493941502725149445995471514781822892886669776
A = 76548721461171533747911417838852759206858825205673491250696441734297318615226024320798706656529038703728631231084155790148283919370554345818139818854112841655270107839
B = 2103083080159597422706551446020625757109756570951674830166998494220734179439318911618156966499109201221652320384817270671579741987575328177442670242481963924501204498
encrypted = "240e7b7678aaaa0dcbe06de7c5598a1ca0be7e2ae584bc7dfd2388cdb1d4fb6a37ceb94556757afc293999cbe5a5a2dbb4071ebf6cfd4332088555f9b2de1922"

order1 = p - 1
factors = ecm.factor(order1)

K = GF(p)
res = []
for i in factors[1:-1]:
    g_i = K(pow(g, order1 // i, p))
    b_i = K(pow(B, order1 // i, p))
    order = ZZ(i)
    x = discrete_log(b_i, g_i, ord=order)
    res.append(x)

b = crt(res, factors[1:-1])
print(factors[1:-1])
print(factors)
assert pow(g, b, p) == B

ss = pow(A, b, p)

def decrypt(ss, ct):
    key = hashlib.sha256(long_to_bytes(int(ss))).digest()[:16]
    cipher = AES.new(key, AES.MODE_ECB)
    pt = cipher.decrypt(ct)
    return pt

flag = decrypt(ss, bytes.fromhex(encrypted))
print(flag)

# Flag: W1{so_you_know_about_the_Diffie-Hellman-key_exchange}